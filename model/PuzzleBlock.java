/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package placeholder.model;

/**
 * PuzzleBlocks are a type of Block that is pushable by the character and can be used to trigger buttons.
 * @author Diogn Lei R. Mortera
 */
public class PuzzleBlock extends Block implements Solid {
  private String goalPosTextureStr;
  private Puzzle puzzle;
  
  private Door door;
  private Item item;
  
  private int goalPosX;
  private int goalPosY;
  private int itemPosX;
  private int itemPosY;
  private boolean inGoalPos = false;
  private String type; //can be "door" and "item"

  /**
   * PuzzleBlocks inherit the properties of a Block, as well as have a goal position.
   * @param n name of the PuzzleBlock
   * @param tS file name of the PuzzleBlock texture image
   * @param p Puzzle instance related to the PuzzleBlock
   * @param d Door instance opened when PuzzleBlock reaches its goal position (if applicable)
   * @param i Item instance spawned when PuzzleBlock reaches its goal position (if applicable)
   * @param pX x-position of the PuzzleBlock in the puzzle grid
   * @param pY y-position of the PuzzleBlock in the puzzle grid
   * @param gpX goal x-position of the PuzzleBlock in the puzzle grid
   * @param gpY goal y-position of the PuzzleBlock in the puzzle grid
   * @param ipX goal x-position of the Item instance to be generated by the PuzzleBlock instance in the puzzle grid
   * @param ipY goal y-position of the Item instance to be generated by the PuzzleBlock in the puzzle grid
   * @param t type of PuzzleBlock
   */
  public PuzzleBlock(String n, String tS, int pX, int pY, Puzzle p, Door d, Item i, int gpX, int gpY, int ipX, int ipY, String t){
    super(n, tS, pX, pY);
    puzzle = p;
    door = d;
    item = i;
    goalPosX = gpX;
    goalPosY = gpY;
    itemPosX = ipX;
    itemPosY = ipY;
    type = t;
  }

  /**
   * Gets the x-position of the goal of the PuzzleBlock.
   * @return goalPosX
   */
  public int getGoalPosX(){
    return goalPosX;
  }
  
  /**
   * Gets the y-position of the goal of the PuzzleBlock.
   * @return goalPosY
   */
  public int getGoalPosY(){
    return goalPosY;
  }

  /**
   * Gets the file name of the image corresponding to the goal position texture
   * @return goalPosTextureStr
   */
  public String getGoalPosTextureStr(){
    return goalPosTextureStr;
  }
  
  /**
   * Determines what happens when the PuzzleBlock reaches the goal position.
   * @throws LockedDoorException
   */
  public void reachedGoalPos() throws LockedDoorException{
      if(type == "door"){
          door.toggleDoor();
      }else if(type == "item"){
          puzzle.genItem(itemPosX, itemPosY, item);
      }
  }

  ///DEPRECATED
  /**
   * Determines the new position of the Block when pushed by a Protag.
   */
  public void pushed(){
    
  }

  /**
   * Stops the PuzzleBlock from moving when pushed to a wall.
   */
  @Override
  public void collided() throws SolidCollisionException{
    
  }
}
